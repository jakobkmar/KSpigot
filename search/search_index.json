{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"KSpigot","text":"<p>KSpigot extends Paper (and all of its forks) with additional functionality. This reaches from small extension functions, to features making use of Kotlin's language features and finally to bigger APIs (e.g. the GUI API).</p> <p>KSpigot is at home on GitHub. Feel free to contribute to the project.</p>"},{"location":"#setup","title":"Setup","text":"<p>In order to get started, follow the setup guide.</p>"},{"location":"#contribute-to-this-documentation","title":"Contribute to this documentation","text":"<p>Contributions to the documentation are welcome, as it is written by the community itself.</p> <p>Create a fork of KSpigot and add new markdown files to <code>guide/docs/</code>, commit and push the changes and then create a pull request to the main project.</p>"},{"location":"commands/brigadier/","title":"Brigadier support","text":"Brigadier dependency for spigot-api users <p>(You only have to do the following if you are using the <code>spigot-api</code> instead of the <code>spigot</code> dependency!)  Whilst Spigot itself depends on Brigadier the Spigot API doesn't so in order for this feature to work you need to add Brigadier as a <code>compileOnly</code> dependency. More information on that can be found here: https://github.com/Mojang/brigadier#gradle</p>"},{"location":"commands/brigadier/#create-a-command","title":"Create a command","text":"<pre><code>command(\"mycommand\") {\n    // the command body\n}\n</code></pre> Danger <p>Do not add the command in your plugin.yml, this will interfere with Brigadier</p>"},{"location":"commands/brigadier/#register-the-command","title":"Register the command","text":"<p>The command will be automatically registered by default, if you are initializing it before the end of the <code>startup</code> call to your plugin.</p> <p>Otherwise, you can register it manually using the <code>command.register()</code> function (where command is the command instance which the <code>command(name)</code> function returns).</p>"},{"location":"commands/brigadier/#command-features","title":"Command features","text":"Where to call these? How to structure these? <p>All the following features can be used inside the command body.  You can infinitely nest all these functions, resulting in complex command structures. </p>"},{"location":"commands/brigadier/#execution-handler","title":"Execution handler","text":"<p>You can define your execution logic using the <code>executes</code> (with a status code) or <code>runs</code> function.</p>"},{"location":"commands/brigadier/#runs","title":"Runs","text":"<p>Setting the status code explicitly: <pre><code>runs { context -&gt;\n    context.bukkitSender.sendMessage(\"hey gamer ;)\")\n    return@runs 1\n}\n</code></pre></p> <p>Alternatively you could use it as following: <pre><code>runs { \n    this.sender.bukkitSender.sendMessage(\"hey gamer ;)\")\n}\n</code></pre> Automatically returning the status code 1.</p>"},{"location":"commands/brigadier/#executes","title":"Executes","text":"<pre><code>executes { context -&gt;\n    context.bukkitSender.sendMessage(\"hey gamer ;)\")\n    return@executes 1\n}\n</code></pre> Info <p>The execution and suggestion providers always do only apply to the location in the tree where they are defined.</p>"},{"location":"commands/brigadier/#the-command-context","title":"The command context","text":"<p>You can use the command context in <code>executes</code> to get the command source. You can use the source for:</p> <ul> <li><code>source.bukkitSender</code> to get the <code>CommandSender</code></li> <li><code>source.player</code> ensure that a player executed the command and get that <code>Player</code></li> <li><code>source.bukkitWorld</code> to get the world of the executor</li> </ul> <p>If you are using <code>runs</code>, you can access these by using <code>sender</code> instead of <code>source</code>.</p>"},{"location":"commands/brigadier/#literals-subcommands","title":"Literals (subcommands)","text":"<pre><code>literal(\"mysubcommand\") {\n    // the command body for this part of the command tree\n}\n</code></pre>"},{"location":"commands/brigadier/#arguments","title":"Arguments","text":"<pre><code>argument(\"argumentname\", StringArgumentType.string()) {\n    // the command body (inside this body, the argument exists in the context)\n}\n</code></pre> <p>The argument name will be displayed to the player. Also, it can be used to retrieve the value of the argument the execution handler.</p>"},{"location":"commands/brigadier/#argument-type","title":"Argument type","text":"<p>The second parameter of the argument function is the argument type. There are a lot of pre-defined argument types by brigadier. </p> <p>The argument types for all primitives can be accessed in the following pattern: <code>NameArgumentType.name()</code> (where name is the name of the primitive)</p> <pre><code>// examples:\nStringArgumentType.string()\nBoolArgumentType.bool()\nIntegerArgumentType.integer()\n</code></pre>"},{"location":"commands/brigadier/#retrieve-the-value-of-an-argument","title":"Retrieve the value of an argument","text":"<p>The value of the argument can be retrieved from the command context.</p> <pre><code>argument(\"argumentname\", StringArgumentType.string()) {\n    runs {\n        val argValue = this.getArgument&lt;String&gt;(\"argumentname\")\n        // or using reified you can omit the type sometimes\n        mapWhereTheKeysAreStrings[this.getArgument(\"argumentname\")]\n    }\n}\n</code></pre>"},{"location":"commands/brigadier/#suggestions","title":"Suggestions","text":"<p>You can provide argument suggestions using the <code>suggestList</code> function. It is not recommended using the default  <code>suggests</code> function.</p> <pre><code>suggestList { Material.values().toList() }\n</code></pre> <p>If you want to do heavy operations inside the suggest functions, you should use <code>suggestListSuspending</code> The body of the <code>suggestListSuspending</code> function is suspending, meaning you can use kotlinx.coroutines in it.</p>"},{"location":"commands/brigadier_example/","title":"Brigadier example","text":"<p>The following command illustrates how to use commands, subcommands, arguments and the command context.</p> <pre><code>command(\"gaming\") {\n    literal(\"set\") {\n        argument(\"state\", BoolArgumentType.bool()) {\n            suggestList { listOf(true, false) }\n            runs {\n                if (this.getArgument(\"state\"))\n                    this.player.sendMessage(\"yoo gaming has been activated\")\n                else {\n                    this.player.kill()\n                    this.player.sendText(\"gaming disabled\"){ color = KColors.INDIANRED }\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"extensions/itembuilder/","title":"Item builder","text":""},{"location":"extensions/itembuilder/#create-an-itemstack","title":"Create an ItemStack","text":"<p>The default way of building complex <code>ItemStack</code>s using just Spigot is often painful to use and confusing for beginners. </p> <p>With KSpigot's item builder you have an easy to use builder DSL. Additionally, it provides an easy way to update the <code>ItemMeta</code> of an <code>ItemStack</code>, which is often needed.</p>"},{"location":"extensions/itembuilder/#example-use-of-the-item-builder","title":"Example use of the item builder","text":"<pre><code>val sword = itemStack(Material.GOLDEN_SWORD) {\n    amount = 3\n    addEnchantment(Enchantment.KNOCKBACK, 2)\n    meta {\n        name = literalText(\"Magic Sword\") {\n            color = KColors.GOLD\n        }\n        isUnbreakable = true\n        addLore {\n            +\"This sword is truly special.\"\n            +\"Try it!\"\n        }\n        customModel = 1001\n        flag(ItemFlag.HIDE_UNBREAKABLE)\n    }\n}\n</code></pre>"},{"location":"extensions/itembuilder/#this-creates-the-following-item","title":"This creates the following item","text":""},{"location":"extensions/listener/","title":"Event listener","text":""},{"location":"extensions/listener/#register-an-event-listener","title":"Register an event listener","text":""},{"location":"extensions/listener/#using-the-listen-function","title":"Using the <code>listen</code> function","text":"<p>You can register an event listener by calling the following function anywhere you want.</p> <pre><code>listen&lt;EventClass&gt; {\n    doSomething()\n}\n</code></pre> <p>The event instance will be passed in as <code>it</code>, but you can change this:</p> <pre><code>listen&lt;PlayerMoveEvent&gt; { moveEvent -&gt;\n    moveEvent.player.kick(literalText(\"Do not move!\"))\n    broadcast(\"${moveEvent.player} moved :/\")\n}\n</code></pre> <p>The <code>listen</code> function returns the <code>Listener</code> instance, which allows you to perform operations on it later.</p> <p>For example you could listen to a specific event temporarily:</p> <pre><code>val moveEventListener = listen&lt;PlayerMoveEvent&gt; {\n    it.player.kick(literalText(\"Do not move!\"))\n}\n\n// e.g. unregister the listener after some time\ntaskRunLater(20 * 5) {\n    moveEventListener.unregister()\n}\n</code></pre>"},{"location":"extensions/listener/#register-an-existing-listener-instance","title":"Register an existing <code>Listener</code> instance","text":"<p>There is an extension function which registers a <code>Listener</code> instance:</p> <pre><code>listenerInstance.register()\n</code></pre>"},{"location":"extensions/listener/#unregister-a-listener","title":"Unregister a <code>Listener</code>","text":"<p>Just call <code>listenerInstance.unregister()</code></p>"},{"location":"extensions/literal_text/","title":"Literal text API","text":""},{"location":"extensions/literal_text/#create-a-text-object","title":"Create a text object","text":"<pre><code>val text = literalText(\"base text\") {\n    // the text builder\n}\n\n// or\n\nval text = literalText {\n    // the text builder\n}\n</code></pre>"},{"location":"extensions/literal_text/#add-children-text-objects","title":"Add children text objects","text":"<pre><code>literalText(\"base text\") {\n    text(\"children text\") {\n        // children text builder\n    }\n}\n</code></pre>"},{"location":"extensions/literal_text/#format-the-text","title":"Format the text","text":"<p>Text formatting:</p> <pre><code>literalText(\"base text\") {\n    bold = true\n    italic = true\n    underline = true\n    strikethrough = true\n    obfuscate = true\n}\n</code></pre> <p>Color:</p> <pre><code>literalText(\"base text\") {\n    color = TextColor.color(255, 116, 99)\n    color = KColors.INDIANRED\n}\n</code></pre>"},{"location":"extensions/literal_text/#events","title":"Events","text":""},{"location":"extensions/literal_text/#hover-event","title":"Hover event","text":""},{"location":"extensions/literal_text/#general-hover-event","title":"General hover event","text":"<pre><code>literalText(\"base text\") {\n    hoverEvent = HoverEvent.hoverEvent(action, value)\n}\n</code></pre>"},{"location":"extensions/literal_text/#show-hover-text","title":"Show hover text","text":"<pre><code>literalText(\"base text\") {\n    hoverText(\"you hovered me\") {\n        // hover text builder\n    }\n}\n</code></pre>"},{"location":"extensions/literal_text/#show-hover-item","title":"Show hover Item","text":"<pre><code>literalText(\"base text\") {\n    hoverItem(item)\n}\n</code></pre>"},{"location":"extensions/literal_text/#show-hover-entity","title":"Show hover Entity","text":"<pre><code>literalText(\"base text\") {\n    hoverEntity(entity)\n}\n</code></pre>"},{"location":"extensions/literal_text/#click-event","title":"Click event","text":""},{"location":"extensions/literal_text/#general-click-event","title":"General click event","text":"<pre><code>literalText(\"base text\") {\n    clickEvent = ClickEvent.clickEvent(action, value)\n}\n</code></pre>"},{"location":"extensions/literal_text/#execute-command","title":"Execute command","text":"<pre><code>literalText(\"base text\") {\n    onClickCommand(\"/me hoho\", onlySuggest = true)\n}\n</code></pre>"},{"location":"extensions/literal_text/#copy-a-string","title":"Copy a String","text":"<pre><code>literalText(\"base text\") {\n    onClickCopy(\"https://github.com/bluefireoly/KSpigot\")\n}\n</code></pre>"},{"location":"extensions/literal_text/#open-a-url","title":"Open a URL","text":"<pre><code>literalText(\"base text\") {\n    onClickOpenURL(\"https://github.com/bluefireoly/KSpigot\")\n}\n</code></pre>"},{"location":"extensions/literal_text/#special","title":"Special","text":"<pre><code>literalText(\"base text\") {\n    // line break\n    newLine()\n    // an empty line (two line breaks)\n    emptyLine()\n}\n</code></pre>"},{"location":"extensions/literal_text/#add-paper-components","title":"Add paper components","text":"<pre><code>literalText(\"base text\") {\n    // e.g. add a TranslatableComponent\n    component(Component.translatable(\"translation.key\")) {\n        // optional text body\n    }\n}\n</code></pre>"},{"location":"extensions/literal_text/#add-legacy-chat-components","title":"Add legacy chat components","text":"<p>You can add legacy text if you want to use the old color codes for some reason.</p> <pre><code>literalText(\"base text\") {\n    legacyText(\"\u00a7cthis text is red\") {\n        // optional text body to format the legacy text\n    }\n}\n</code></pre>"},{"location":"extensions/tasks/","title":"Tasks","text":""},{"location":"extensions/tasks/#the-general-task-function","title":"The general task function","text":"<p>The task function is very powerful. It connects almost all kinds of Spigot tasks and even adds additional features on top.</p> <p>You define its behaviour by providing the following parameters (all are optional and have default values):</p> Parameter Description sync if the runnable should run sync (true) or async (false) delay the delay (in ticks) until the first execution of the task period at which interval (in ticks) the task should be repeated howOften how many times the task should be executed - null for infinite execution endCallback code that should always be executed when the runnable ends safe if the endCallback of the runnable should always be executed, even if the server shuts down or the runnable ends prematurely runnable the runnable which should be executed each repetition <p>The body of task function is the <code>runnable</code> parameter. This runnable provides an instance of <code>KSpigotRunnable</code>, which inherits from <code>BukkitRunnable</code>, but adds counters on top. These counters are:</p> <ul> <li><code>counterUp</code></li> <li><code>counterDownToOne</code></li> <li><code>counterDownToZero</code></li> </ul> <p>An example would be:</p> <pre><code>task(\n    sync = false,\n    delay = 25,\n    period = 20,\n    howOften = 5\n) {\n    println(it.counterUp) // starting from zero\n    println(it.counterDownToOne) // starting from howOften\n    println(it.counterDownToZero) // starting from howOften - 1\n}\n</code></pre>"},{"location":"extensions/tasks/#switch-between-synchronous-and-asynchronous-execution","title":"Switch between synchronous and asynchronous execution","text":"<p>You can simply use the <code>sync</code> and <code>async</code> function.</p> <pre><code>sync {\n    println(\"now sync\")\n    async {\n        println(\"now async\")\n        sync {\n            println(\"now sync again\")\n        }\n    }\n}\n</code></pre> <p>Alternatively, if you want to specify wether a task should be executed sync or async using a parameter, you can use the <code>taskRun</code> function, which has a <code>sync</code> parameter.</p>"},{"location":"extensions/tasks/#other-simpler-task-functions","title":"Other (simpler) task functions","text":""},{"location":"extensions/tasks/#run-a-task-later","title":"Run a task later","text":"<p>You can use <code>taskRunLater</code>.</p> <p>This function executes the given <code>runnable</code> with the given <code>delay</code>. Either sync or async (specified by the <code>sync</code> parameter).</p>"},{"location":"gui/compounds/","title":"Compounds","text":""},{"location":"gui/compounds/#create-a-new-compound","title":"Create a new compound","text":"<p>In this example, let's create a simple gui which lists all existing materials. Also, we want to send a chat message with the name of the material when the user clicks on the icon.</p> <p>You can create a compound inside a page builder scope. The recommended way of doing so is to use the <code>createRectCompound</code> function.</p> <pre><code>page(1) {\n    val compound = createRectCompound&lt;Material&gt;(\n        Slots.RowOneSlotOne, Slots.RowSixSlotEight,\n        iconGenerator = {\n            ItemStack(it)\n        },\n        onClick = { clickEvent, element -&gt;\n            clickEvent.player.sendMessage(\"You clicked on: ${element.name}\")\n        }\n    )\n}\n</code></pre> <p>Notice that the generic type of the compound is <code>Material</code>. The compound type defines the type of the elements which can be added to the compound.</p> <p>The <code>iconGenerator</code> defines how each compound element should be displayed. You will get the element passed as <code>it</code> and you have to return an <code>ItemStack</code>, which will be used for the icon.</p> Info <p>In our example, it is very easy to create the icon, as we can easily create an <code>ItemStack</code> from a <code>Material</code>. In your scenarios, don't be scared of putting more complex logic inside the <code>iconGenerator</code>.</p>"},{"location":"gui/compounds/#modify-the-content-of-a-compound","title":"Modify the content of a compound","text":"<p>The compound from above will be empty at first, you have to add content to it. This can be done using the <code>compound.addContent</code> function.</p> <p>The content you add has to be of the type you defined earlier (in our case this is <code>Material</code>).</p> <pre><code>compound.addContent(Material.values().toList())\n</code></pre> <p>In order to remove content, call the <code>compound.removeContent</code> function. Let's remove air from our example compound.</p> <pre><code>compound.removeContent(Material.AIR)\n</code></pre>"},{"location":"gui/compounds/#sort-the-compound","title":"Sort the compound","text":"<p>You can use the <code>compound.sortContentBy</code> function to define in which order the elements of a compound should be displayed.</p> <p>In our example, we could sort by the name of the material like this:</p> <pre><code>compound.sortContentBy { it.name }\n</code></pre>"},{"location":"gui/compounds/#add-scroll-buttons","title":"Add scroll buttons","text":"<p>If the content of the compound won't fit on one page of the GUI, do not create multiple pages, even if this is what you might think of at first.</p> <p>Instead, add scroll buttons to the same page!</p>"},{"location":"gui/compounds/#smooth-scrolling","title":"Smooth scrolling","text":"<p>To implement smooth scrolling, create scroll buttons like this:</p> <pre><code>compoundScroll(\n    Slots.RowOneSlotNine,\n    ItemStack(Material.PAPER), compound, scrollTimes = 6\n)\ncompoundScroll(\n    Slots.RowSixSlotNine,\n    ItemStack(Material.PAPER), compound, scrollTimes = 6, reverse = true\n)\n</code></pre> <p>Notice that you have to pass the <code>compound</code> as a parameter. Also, be careful to set <code>scrollTimes</code> to the height of your compound (in our example this is 6, because the inventory is 6 slots high, and we use the full height).</p> <p>You can use the <code>reverse</code> parameter and set it to true to create a button that scrolls backwards.</p>"},{"location":"gui/compounds/#instant-hard-scrolling","title":"Instant (hard) scrolling","text":"<p>Instant (or hard) scrolling means that no scrolling animation will be displayed.</p> <p>To implement instant scrolling, leave <code>scrollTimes</code> at its default value (1) and instead modify the <code>scrollLines</code> parameter. Set <code>scrollLines</code> to the amount of lines you want to instantly scroll by pressing the button. If you want to scroll \"page by page\", set <code>scrollLines</code> to the height of the compound.</p> <p>In our example, we could create the following button to scroll \"page by page\" instantly (without any scrolling animation):</p> <pre><code>compoundScroll(\n    Slots.RowSixSlotNine,\n    ItemStack(Material.PAPER), compound, scrollLines = 6\n)\n</code></pre>"},{"location":"migration/1_16_to_1_17/","title":"Updating from KSpigot for 1.16 to KSpigot for 1.17","text":""},{"location":"migration/1_16_to_1_17/#dependency-management","title":"Dependency management","text":"<p>Do not use the Gradle shadow plugin anymore! Spigot now has its own library feature, use that one instead. This applies to KSpigot, but in the best case for your other dependencies as well!</p> <p>For KSpigot this means, that you have to add the following to your <code>plugin.yml</code>:</p> <pre><code>libraries:\n  - \"net.axay:kspigot:VERSION\"\n</code></pre> <p>Of course, replace <code>VERSION</code> with the KSpigot version you are using.</p> <p>Read the setup guide for more information.</p>"},{"location":"migration/1_16_to_1_17/#removed-features","title":"Removed features","text":"<p>You can no longer await anvil input from a player. This feature was not stable enough to fit in this project.</p>"},{"location":"migration/1_16_to_1_17/#changed","title":"Changed","text":"<p>The <code>Listener.register()</code> extension function now is no longer available, instead it has been replaced by <code>SingleListener&lt;T : Event&gt;.register()</code>. Don't worry, this means that this change does not affect you if you are using the <code>listen</code> function provided by KSpigot.</p> <p>KSpigot is now compiled using Java 16! Make sure to use Java 16 aswell. Java 16 is now the minimum required version for Minecraft by Mojang.</p>"},{"location":"migration/1_17_to_1_18/","title":"Upgrading to KSpigot for 1.18 (from 1.17)","text":""},{"location":"migration/1_17_to_1_18/#use-it-with-paperweight-really-like-really","title":"Use it with paperweight (really (like really))","text":"<p>Please use this library together with the paperweight Gradle plugin, as it remaps the obfuscated parts of the KSpigot jar to mojmap, and adds all necessary dependencies with one bundle!</p> <p><code>settings.gradle.kts</code> <pre><code>pluginManagement {\n    repositories {\n        gradlePluginPortal()\n        maven(\"https://papermc.io/repo/repository/maven-public/\")\n    }\n}\n</code></pre></p> <p><code>build.gradle.kts</code> <pre><code>plugins {\n    id(\"io.papermc.paperweight.userdev\") version \"VERSION\"\n}\n\ndependencies {\n    paperDevBundle(\"1.18.1-R0.1-SNAPSHOT\")\n    implementation(\"net.axay:kspigot:1.18.0\")\n}\n</code></pre></p>"},{"location":"migration/1_17_to_1_18/#removed-features","title":"Removed features","text":"<p>The wrapper for nbt compounds has been removed, use <code>CompoundTag</code> of net.minecraft instead!</p>"},{"location":"migration/1_17_to_1_18/#upcoming-features","title":"Upcoming features","text":"<p>Due to Paper now being binary compatible with all other Minecraft modding toolchains, expect to see features from FabrikMC on the paper side!</p>"},{"location":"migration/1_17_to_1_18/#paper-first-policy","title":"Paper first policy","text":"<p>From now on, KSpigot only supports Paper. Use it with \"vanilla\" Spigot at your own risk. It is highly suggested that you use Paper together with this library.</p>"},{"location":"setup/entrypoint/","title":"Entrypoint to your plugin","text":"<p>The entrypoint in KSpigot is a class which represents the main class of your plugin.</p> Type of the main class <p>Please note that due to a limitation of Spigot, your main class has to be a <code>class</code>, it cannot be an <code>object</code> or anything else.</p>"},{"location":"setup/entrypoint/#create-the-main-class","title":"Create the main class","text":"<p>Create a new file at <code>src/main/kotlin/your/package/structure/</code> and call it (for example) <code>Manager</code>.</p> <p>Add the following class to the file:</p> <pre><code>class InternalMainClass : KSpigot() {\n    override fun load() { }\n    override fun startup() { }\n    override fun shutdown() { }\n}\n</code></pre> Coming from Paper or Spigot? <p>When using KSpigot do not inherit from <code>JavaPlugin</code>, inherit from <code>KSpigot</code> instead.</p> <p>Also, please note that:</p> <ul> <li><code>onLoad</code> becomes <code>load</code></li> <li><code>onEnable</code> becomes <code>startup</code></li> <li><code>onDisable</code> becomes <code>shutdown</code></li> </ul> Be careful with the <code>load</code> function <p>The <code>load()</code> function is called earlier than the safe <code>startup()</code> function. During that time not all functionality of Spigot is available to your plugin, therefore you should prefer the <code>startup()</code> function if possible.</p>"},{"location":"setup/entrypoint/#make-it-globally-available","title":"Make it globally available","text":"<p>As noted above you cannot use <code>object</code> for the main class. Fortunately, due to the fact that there should always only exist one instance of your main class, you can provide it globally by building the main class as follows:</p> <pre><code>class InternalMainClass : KSpigot() {\n    companion object {\n        lateinit var INSTANCE: InternalMainClass; private set\n    }\n\n    override fun load() {\n        INSTANCE = this\n    }\n\n    override fun startup() { }\n\n    override fun shutdown() { }\n}\n\nval Manager by lazy { InternalMainClass.INSTANCE }\n</code></pre>"},{"location":"setup/gradle/","title":"Setup using Gradle","text":"<p>The following code snippets can be used in your <code>build.gradle.kts</code> file.</p> <p>An example of a final configuration file is also available.</p>"},{"location":"setup/gradle/#prerequisites","title":"Prerequisites","text":""},{"location":"setup/gradle/#java-version","title":"Java version","text":"<p>Make sure that you have configured the Java version correctly. </p>"},{"location":"setup/gradle/#add-paper-via-paperweight","title":"Add paper (via paperweight)","text":"<p>Add the paperweight Gradle plugin. Have a look at the example.</p>"},{"location":"setup/gradle/#add-kspigot","title":"Add KSpigot","text":""},{"location":"setup/gradle/#add-the-dependency","title":"Add the dependency","text":"<p>Add the following repository to your <code>repositories</code> scope:</p> <pre><code>repositories {\n    mavenCentral()\n}\n</code></pre> <p>Add the KSpigot dependency to your <code>dependencies</code> scope:</p> <pre><code>dependencies {\n    implementation(\"net.axay:kspigot:VERSION\")\n}\n</code></pre> <p>Replace <code>VERSION</code> with the version you want to use. </p> <p>Latest version (without the <code>v</code>):  </p>"},{"location":"setup/gradle/#add-kspigot-to-your-plugins-libraries","title":"Add KSpigot to your plugins libraries","text":"<p>Add KSpigot as a library to the libraries list on your <code>plugin.yml</code>. Make sure that you are always using the same string you where using when defining the dependency in Gradle.</p> <pre><code>libraries:\n  - \"net.axay:kspigot:VERSION\"\n</code></pre>"},{"location":"setup/gradle/#build-your-final-plugin","title":"Build your final plugin","text":"<p>Run the Gradle task called <code>build</code>. Using IntelliJ IDEA, this can be done using the Gradle sidebar, where you can find the task under <code>Tasks &gt; build &gt; build</code>. Alternatively, you can also run <code>./gradlew build</code> in your terminal.</p> <p>The final .jar file of your plugin will then be at the following location: <code>build/libs/yourplugin.jar</code></p>"},{"location":"setup/gradle_example/","title":"Build script example","text":"<p>An example for a Gradle build script of a project using KSpigot would be:</p> <p>(please note that the version in the following examples might be outdated)</p> <p><code>build.gradle.kts</code> <pre><code>import org.jetbrains.kotlin.gradle.tasks.KotlinCompile\n\nplugins {\n    kotlin(\"jvm\") version \"1.7.0\"\n    id(\"io.papermc.paperweight.userdev\") version \"1.3.6\"\n}\n\ngroup = \"your.group\"\nversion = \"1.0-SNAPSHOT\"\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    paperDevBundle(\"1.19-R0.1-SNAPSHOT\")\n    implementation(\"net.axay:kspigot:1.19.0\")\n}\n\ntasks {\n    build {\n        dependsOn(reobfJar)\n    }\n    compileJava {\n        options.encoding = \"UTF-8\"\n        options.release.set(17)\n    }\n    compileKotlin {\n        kotlinOptions.jvmTarget = \"17\"\n    }\n}\n</code></pre></p> <p><code>settings.gradle.kts</code> <pre><code>rootProject.name = \"projectname\"\n\npluginManagement {\n    repositories {\n        gradlePluginPortal()\n        maven(\"https://papermc.io/repo/repository/maven-public/\")\n    }\n}\n</code></pre></p>"},{"location":"setup/beginners/beginners/","title":"For absolute beginners","text":"<p>There are several things required to get started with KSpigot.</p>"},{"location":"setup/beginners/beginners/#kotlin","title":"Kotlin","text":"<p>Kotlin is requirement for using KSpigot, as it is made for use with the Kotlin programming language.</p> <p>You can start learning Kotlin with the official docs or by using the Kotlin Playground.</p>"},{"location":"setup/beginners/beginners/#gradle","title":"Gradle","text":"<p>You should be able to use Gradle as your build system, although you do not have to understand to much of it. Probably it will even work if you just copy and paste the snippets this guide provides.</p>"},{"location":"setup/beginners/beginners/#paper","title":"Paper","text":"<p>Paper is just an API, meaning that if you are able to use Kotlin, you will be able to use an API like Paper and KSpigot. Nevertheless, it is good to know at least something about the Paper API.</p>"},{"location":"setup/beginners/java_version/","title":"Configure Java version","text":"<p>Configuring the Java version is nothing specific to KSpigot, it should always be done. It is listed in this guide anyways, because a lot of beginners forget to do this - and then get confused about not being able to use inline functions.</p> <p>Java 17 is the minimum required Java version by Minecraft, therefore KSpigot requires it as well.</p> <p>You can configure the Java version using Gradle:</p> <pre><code>// set the Java version you are using, Java 17 is the minimum required version for Minecraft\n\ntasks {\n    compileJava {\n        options.release.set(17)\n    }\n    compileKotlin {\n        kotlinOptions.jvmTarget = \"17\"\n    }\n}\n</code></pre>"},{"location":"setup/beginners/project/","title":"Starting a new project","text":"<p>In this guide we will assume that you are using or want to use Gradle.</p>"},{"location":"setup/beginners/project/#install-java","title":"Install Java","text":"<p>You will need to have the JDK (Java Development Kit) installed.</p> <p>If you do not already have a JDK installed, you have several options:</p> <ul> <li>Windows<ul> <li>or using Scoop you can do this</li> </ul> </li> <li>Arch <code>pacman -S jdk-openjdk</code> (refer to the archwiki for other versions)</li> <li>Debian <code>apt install default-jdk</code> (refer to the Debian Wiki for other versions)</li> </ul> <p>Please make sure that you know which version of Java you have just installed. If you just have one installation of Java, run <code>java -version</code> to get the current Java version on your system.</p>"},{"location":"setup/beginners/project/#create-a-project","title":"Create a project","text":"<p>In IntelliJ IDEA, click on <code>File &gt; New &gt; Project</code> and choose <code>Gradle</code> on the sidebar in the popup window.</p> <p>Now choose the JDK which you have just installed.</p> <p>If you want to write your gradle build script in Kotlin, make sure to tick the <code>Kotlin DSL build script</code> checkbox. (recommended)</p> <p>Now select <code>Java</code> and <code>Kotlin/JVM</code> as your frameworks.</p> <p>After that, you can create your project.</p> <p>You may now continue with the Setup using Gradle guide.</p>"},{"location":"setup/beginners/project/#add-the-spigot-pluginyml","title":"Add the Spigot <code>plugin.yml</code>","text":"<p>Create a new file called <code>plugin.yml</code> in the <code>resources</code> directory of your project.</p> <p>Read the official documentation for the Spigot plugin.yml file.</p>"}]}